AWSTemplateFormatVersion: '2010-09-09'
Description: Organization data collections.
Parameters:
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  ManagementAccountID:
    Type: String
    AllowedPattern: ([a-z0-9\-, ]*?$)
    Description: "(Ex: 123456789,098654321,789054312) List of Payer IDs you wish to collect data for. Can just be one Accounts"
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
Outputs:
  LambdaFunctionName:
    Value:
      Ref: LambdaFunction
  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
    Export:
      Name: AccountCollectorLambdaARN
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-account-collector"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "Assume-Management-Organization-Data-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in all Management Accounts
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/AWS-Organization-Account-Collector*"
                 

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${RolePrefix}accounts-collector-Lambda'
      Description: LambdaFunction of python3.8.
      Runtime: python3.8
      Code:
          ZipFile: |
            import boto3
            import logging
            import os
            import json

            logger = logging.getLogger()
            if "LOG_LEVEL" in os.environ:
                numeric_level = getattr(logging, os.environ['LOG_LEVEL'].upper(), None)
                if not isinstance(numeric_level, int):
                    raise ValueError('Invalid log level: %s' % numeric_level)
                logger.setLevel(level=numeric_level)
            else:
                logger.setLevel(logging.INFO)


            def org_accounts(role_name, payer_id):
                account_ids = []
                ROLE_ARN = f"arn:aws:iam::{payer_id}:role/{role_name}"
                sts_connection = boto3.client('sts')
                acct_b = sts_connection.assume_role(
                    RoleArn=ROLE_ARN,
                    RoleSessionName="data_collection"
                )
                        
                ACCESS_KEY = acct_b['Credentials']['AccessKeyId']
                SECRET_KEY = acct_b['Credentials']['SecretAccessKey']
                SESSION_TOKEN = acct_b['Credentials']['SessionToken']

                # create service client using the assumed role credentials
                client = boto3.client(
                    "organizations", region_name="us-east-1", #Using the Organization client to get the data. This MUST be us-east-1 regardless of region you have the lamda in
                    aws_access_key_id=ACCESS_KEY,
                    aws_secret_access_key=SECRET_KEY,
                    aws_session_token=SESSION_TOKEN,
                )
                paginator = client.get_paginator("list_accounts") #Paginator for a large list of accounts
                response_iterator = paginator.paginate()

                for account in response_iterator:
                    for ids in account['Accounts']:
                        account_ids.append(ids)
                logger.info("AWS Org data Gathered")
                return account_ids


            def lambda_handler(event, context):
                role_name = os.environ['ROLE']
                MANAGEMENT_ACCOUNT_IDS = os.environ['MANAGEMENT_ACCOUNT_IDS']

                accountlist = []
                for payer_id in [r.strip() for r in MANAGEMENT_ACCOUNT_IDS.split(',')]:
                    try: 
                        account_info = org_accounts(role_name, payer_id)
                        
                        for account in account_info:
                            if  account['Status'] == 'ACTIVE':
                                try:
                                    account_data = {}
                                    account_data['account_id'] = account['Id']
                                    account_data['account_name'] = account['Name']
                                    account_data['payer_id'] = payer_id

                                    accountlist.append({"account" : json.dumps(account_data)})
                                except Exception as e:
                                    logger.warning("%s" % e)
                            else:
                                logger.info(f"account {account['Id']} is not active")
                        logger.info(f"AWS Org data gathered and found {len(accountlist)} accounts")
                    except Exception as e:
                        # Send some context about this error to Lambda Logs
                        logger.warning("%s" % e)
                        continue 
                if len(accountlist) == 0:
                    raise ValueError("No accounts were collected.")
                return {
                    'statusCode': 200,
                    'accountList': accountlist
                }
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 600
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ROLE: !Ref ManagementRoleName
          MANAGEMENT_ACCOUNT_IDS: !Ref ManagementAccountID
