AWSTemplateFormatVersion: '2010-09-09'
Description: Organization data collections.
Parameters:
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  ManagementAccountID:
    Type: String
    AllowedPattern: ([a-z0-9\-, ]*?$)
    Description: "(Ex: 123456789,098654321,789054312) List of Payer IDs you wish to collect data for. Can just be one Accounts"
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
Outputs:
  LambdaFunctionName:
    Value:
      Ref: LambdaFunction
  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
    Export:
      Name: AccountCollectorLambdaARN
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-account-collector"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "Assume-Management-Organization-Data-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in all Management Accounts
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/AWS-Organization-Account-Collector*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${RolePrefix}accounts-collector-Lambda'
      Description: LambdaFunction of python3.8.
      Runtime: python3.8
      Code:
          ZipFile: |
            import os
            import json
            import logging

            import boto3

            ROLE_NAME = os.environ['ROLE']
            MANAGEMENT_ACCOUNT_IDS = os.environ['MANAGEMENT_ACCOUNT_IDS']

            logger = logging.getLogger()
            logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

            def iterate_accounts(role_name, payer_id):
                cred = boto3.client('sts').assume_role(
                    RoleArn=f"arn:aws:iam::{payer_id}:role/{role_name}",
                    RoleSessionName="data_collection"
                )['Credentials']
                organizations = boto3.client(
                    "organizations",
                    region_name="us-east-1", #This MUST be us-east-1 regardless of lambda region
                    aws_access_key_id=cred['AccessKeyId'],
                    aws_secret_access_key=cred['SecretAccessKey'],
                    aws_session_token=cred['SessionToken'],
                )
                for page in organizations.get_paginator("list_accounts").paginate():
                    for account in page['Accounts']:
                        yield account

            def lambda_handler(event, context):
                account_list = []
                for payer_id in [r.strip() for r in MANAGEMENT_ACCOUNT_IDS.split(',')]:
                    try:
                        for account in iterate_accounts(ROLE_NAME, payer_id):
                            if  account['Status'] != 'ACTIVE':
                                logger.info(f"account {account['Id']} is not active")
                                continue
                            account_data = {}
                            account_data['account_id'] = account.get('Id')
                            account_data['account_name'] = account.get('Name')
                            account_data['payer_id'] = payer_id
                            account_list.append({"account" : json.dumps(account_data)})
                    except Exception as exc:
                        logger.warning(exc)

                if not account_list:
                    raise ValueError("No accounts were collected.")

                return {
                    'statusCode': 200,
                    'accountList': account_list
                }
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 600
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ROLE: !Ref ManagementRoleName
          MANAGEMENT_ACCOUNT_IDS: !Ref ManagementAccountID
