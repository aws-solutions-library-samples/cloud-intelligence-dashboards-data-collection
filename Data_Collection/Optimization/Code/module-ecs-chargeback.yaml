AWSTemplateFormatVersion: '2010-09-09'
Description: Collects ECS Cluster and service data and places into a bucket in the management account
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to hold lambada information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to that will be created by the management template
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: 'ecs-chargeback'
  GlueRoleARN:
    Type: String
    Description: ARN of the IAM role deployed to use for glue.
  Schedule:
    Type: String
    Description: Cloud watch event Schedule to trigger the lambda 
    Default: "rate(14 days)"
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the lambda for the Accounts Collector function
  CURTable:
    Type: String
    Description: The name of your Cost and Usage Report table in Athena
    Default: cid_cur.cur
  CodeBucket:
    Type: String
    Description: S3 Bucket that exists and holds code
    Default: aws-well-architected-labs
  CodeKey:
    Type: String
    Description: file name of ZipFile with data code
    Default: Cost/Labs/300_Optimization_Data_Collection/ecs.zip

Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution of collection data.
    Value: !GetAtt LambdaRole.Arn
  LambdaFunctionARN:
    Description: ARN for the module's primary Lambda function
    Value: !GetAtt LambdaFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${MultiAccountRoleName}" # Need to assume a Read role in all Accounts
        - PolicyName: !Sub "${CFDataName}-permissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: 
                  - !Ref DestinationBucketARN
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                - "ecs:ListAttributes"
                - "ecs:DescribeTaskSets"
                - "ecs:DescribeTaskDefinition"
                - "ecs:DescribeClusters"
                - "ecs:ListServices"
                - "ecs:ListAccountSettings"
                - "ecs:DescribeCapacityProviders"
                - "ecs:ListTagsForResource"
                - "ecs:ListTasks"
                - "ecs:ListTaskDefinitionFamilies"
                - "ecs:DescribeServices"
                - "ecs:ListContainerInstances"
                - "ecs:DescribeContainerInstances"
                - "ecs:DescribeTasks"
                - "ecs:ListTaskDefinitions"
                - "ecs:ListClusters"
                Resource: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${RolePrefix}${CFDataName}-Lambda-Collect'
      Description: !Sub "Lambda Function to retrieve ${CFDataName}"
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          from boto3.session import Session
          import logging
          from datetime import date, datetime
          import json
          import os
          from botocore.exceptions import ClientError

          bucket = os.environ["BUCKET_NAME"]
          prefix = os.environ["PREFIX"]
          role_name = os.environ['ROLENAME']

          logger = logging.getLogger()
          if "LOG_LEVEL" in os.environ:
              numeric_level = getattr(logging, os.environ['LOG_LEVEL'].upper(), None)
              if not isinstance(numeric_level, int):
                  raise ValueError('Invalid log level: %s' % numeric_level)
              logger.setLevel(level=numeric_level)
          else:
              logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              collection_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              if 'account' not in event:
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )

              try:
                  account = json.loads(event["account"])
                  account_id = account["account_id"]
                  account_name = account["account_name"]
                  payer_id = account["payer_id"]
                  logger.info(f"Collecting data for account: {account_id}")
                  list_region = list_regions()
                  local_file = "/tmp/data.json"
                  f = open(local_file, "w")
                  session = assume_session(account_id)
                  for region in list_region:
                      logger.info(f"Region is: {region}")
                      client = session.client("ecs", region_name = region)
                      paginator = client.get_paginator("list_clusters")
                      response_iterator = paginator.paginate()

                      try:
                          for response in response_iterator:
                              for cluster in response["clusterArns"]:
                                  listservices = client.list_services(
                                      cluster=cluster.split("/")[1],
                                      maxResults=100
                                  )
                                  for i in listservices["serviceArns"]:
                                      # print (i)
                                      services = client.describe_services(
                                          cluster=cluster.split("/")[1],
                                          services=[i.split("/")[2],],
                                          include=["TAGS"],
                                      )
                                      for service in services["services"]:
                                          data = {
                                              "cluster": cluster.split("/")[1],
                                              "services": service.get("serviceName"),
                                              "servicesARN": i, #.split("/")[2]
                                              "tags": service.get("tags"),
                                              "account_id":account_id
                                          }
                                          jsondata = json.dumps(data)
                                          print(jsondata)
                                          f.write(jsondata + "\n")
                      except Exception as e:
                          print(region, account_id, type(e), e)
                      print("respose gathered")
                      f.close()

                      if os.path.getsize(local_file) == 0:
                          print(f"No data in file for {prefix}")
                          continue
                      today = date.today()
                      year = today.year
                      month = today.month
                      day = today.day
                      key = f"{prefix}/{prefix}-data/payer_id={payer_id}/year={year}/month={month}/{account_id}-{year}-{month}-{day}.json"
                      client = boto3.client("s3")
                      client.upload_file(local_file, bucket, key)
                      print(f"Data in s3 - {key}")
              except Exception as e:
                  logging.warning(e)
                  
          def assume_session(account_id):
              role_arn = f"arn:aws:iam::{account_id}:role/{role_name}" #OrganizationAccountAccessRole
              sts_client = boto3.client('sts')
              
              try:
                  #region = sts_client.meta.region_name
                  assumedRoleObject = sts_client.assume_role(
                      RoleArn=role_arn,
                      RoleSessionName="data_collection"
                  )
                  
                  credentials = assumedRoleObject['Credentials']
                  session = Session(
                      aws_access_key_id=credentials['AccessKeyId'],
                      aws_secret_access_key=credentials['SecretAccessKey'],
                      aws_session_token=credentials['SessionToken']
                  )
                  return session

              except ClientError as e:
                  logging.warning(f"Unexpected error Account {account_id}: {e}")
                  return None

          def list_regions():
              s = Session()
              ecs_regions = s.get_available_regions('ecs')
              return ecs_regions    
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref MultiAccountRoleName

  AthenaClusterMetadataView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_cluster_metadata_view
      QueryString: |
          CREATE OR REPLACE VIEW ecs_chargeback_cluster_metadata_view AS 
          SELECT
            *
          , "tag"."value"
          FROM
            ( ecs_chargeback_ecs_services_clusters_data
              CROSS JOIN UNNEST("tags") t (tag)
            )
          WHERE ("tag"."key" = 'BU')
  AthenaEc2ClusterCostsView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_ec2_cluster_costs
      QueryString: !Sub |
        CREATE OR REPLACE VIEW ecs_chargeback_ec2_cluster_costs AS
        SELECT
          line_item_product_code
        , line_item_usage_account_id
        , line_item_resource_id
        , line_item_usage_type
        , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN line_item_usage_amount WHEN (line_item_line_item_type = 'DiscountedUsage') THEN line_item_usage_amount WHEN (line_item_line_item_type = 'Usage') THEN line_item_usage_amount ELSE 0 END)) sum_line_item_usage_amount
        , sum(line_item_unblended_cost) unblended_cost
        , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN savings_plan_savings_plan_effective_cost WHEN (line_item_line_item_type = 'SavingsPlanRecurringFee') THEN (savings_plan_total_commitment_to_date - savings_plan_used_commitment) WHEN (line_item_line_item_type = 'SavingsPlanNegation') THEN 0 WHEN (line_item_line_item_type = 'SavingsPlanUpfrontFee') THEN 0 WHEN (line_item_line_item_type = 'DiscountedUsage') THEN reservation_effective_cost WHEN (line_item_line_item_type = 'RIFee') THEN (reservation_unused_amortized_upfront_fee_for_billing_period + reservation_unused_recurring_fee) ELSE line_item_unblended_cost END)) sum_line_item_amortized_cost
        , month
        , year
        FROM
          ${CURTable}
        WHERE (((product_product_name = 'Amazon Elastic Compute Cloud') AND ((resource_tags_user_name LIKE '%ECS%') OR (resource_tags_user_name LIKE '%ecs%'))) AND (((line_item_usage_type LIKE '%BoxUsage%') OR (line_item_usage_type LIKE '%Spot%')) OR (line_item_usage_type LIKE '%%EBS%%Volume%%')))
        GROUP BY resource_tags_user_name, line_item_product_code, line_item_usage_account_id, line_item_resource_id, line_item_usage_type, month, year
  AthenaBUUsageView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_bu_usage
      QueryString: !Sub |
        CREATE OR REPLACE VIEW ecs_chargeback_bu_usage AS 
        SELECT
          "bill_payer_account_id"
        , "line_item_product_code"
        , "line_item_usage_account_id"
        , "line_item_resource_id"
        , "task"
        , "resource_tags_aws_ecs_service_Name"
        , "line_item_usage_type"
        , "line_item_operation"
        , "sum"(CAST("sum_line_item_usage_amount" AS double)) "sum_line_item_usage_amount"
        , "cur"."month"
        , "cur"."year"
        , "cluster"
        , "services"
        , "servicearn"
        , "account_id"
        , "value"
        FROM
          ((
          SELECT
            "bill_payer_account_id"
          , "line_item_product_code"
          , "line_item_usage_account_id"
          , "line_item_resource_id"
          , "split"("line_item_resource_id", '/')[2] "task"
          , "resource_tags_aws_ecs_service_Name"
          , "line_item_usage_type"
          , "line_item_operation"
          , "sum"(CAST("line_item_usage_amount" AS double)) "sum_line_item_usage_amount"
          , "month"
          , "year"
          FROM
            ${CURTable}
          WHERE ((("line_item_operation" = 'ECSTask-EC2') AND ("line_item_product_code" IN ('AmazonECS'))) AND ("line_item_usage_type" LIKE '%GB%'))
          GROUP BY "bill_payer_account_id", "line_item_usage_account_id", "line_item_product_code", "line_item_operation", "line_item_resource_id", "resource_tags_aws_ecs_service_Name", "line_item_usage_type", "line_item_operation", "month", "year"
        )  cur
        LEFT JOIN (
          SELECT
            "cluster"
          , "services"
          , "servicearn"
          , "value"
          , "year"
          , "month"
          , "account_id"
          FROM
            ecs_chargeback_cluster_metadata_view
        )  clusters_data ON ((("clusters_data"."account_id" = "cur"."line_item_usage_account_id") AND (("clusters_data"."services" = "cur"."resource_tags_aws_ecs_service_name") AND ("clusters_data"."year" = "cur"."year"))) AND ("clusters_data"."month" = "cur"."month")))
        GROUP BY "bill_payer_account_id", "line_item_usage_account_id", "line_item_product_code", "line_item_operation", "line_item_resource_id", "resource_tags_aws_ecs_service_Name", "line_item_usage_type", "line_item_operation", "cur"."month", "cur"."year", "cluster", "services", "servicearn", "value", "task", "account_id"
  AthenaEC2CChargeBackQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_report
      QueryString: |
        SELECT ecs_chargeback_bu_usage.line_item_usage_account_id, sum(sum_line_item_usage_amount) AS task_usage, total_usage, (sum(sum_line_item_usage_amount)/total_usage) as percent,  ec2_cost, ((sum(sum_line_item_usage_amount)/total_usage)*ec2_cost) as ecs_cost,
          "cluster",
          services,
          servicearn,
          value,
          ecs_chargeback_bu_usage.month,
          ecs_chargeback_bu_usage.year
        FROM "ecs_chargeback_bu_usage"
        LEFT JOIN (select line_item_usage_account_id, sum(sum_line_item_usage_amount) as total_usage, year, month from "ecs_chargeback_bu_usage" where "cluster" <> '' group by line_item_usage_account_id, year, month) sum
        on sum.line_item_usage_account_id = ecs_chargeback_bu_usage.line_item_usage_account_id
        and sum.month=ecs_chargeback_bu_usage.month
        and sum.year=ecs_chargeback_bu_usage.year
        LEFT JOIN
        (SELECT line_item_usage_account_id, month, year, sum(sum_line_item_amortized_cost) as ec2_cost FROM "ec2_cluster_costs_view" group by  line_item_usage_account_id,month,year) ec2_cost
        on ec2_cost.month=ecs_chargeback_bu_usage.month
        and ec2_cost.year=ecs_chargeback_bu_usage.year
        and ec2_cost.line_item_usage_account_id=ecs_chargeback_bu_usage.line_item_usage_account_id
        WHERE "cluster" <> ''  and  if((date_format(current_timestamp , '%M') = 'January'),ecs_chargeback_bu_usage.month = '12', ecs_chargeback_bu_usage.month = CAST((month(now())-1) AS VARCHAR) )
        and  if((date_format(current_timestamp , '%M') = 'January'), ecs_chargeback_bu_usage.year = CAST((year(now())-1) AS VARCHAR) ,ecs_chargeback_bu_usage.year = CAST(year(now()) AS VARCHAR))
        GROUP BY  "cluster", services, servicearn, value, ecs_chargeback_bu_usage.month, ecs_chargeback_bu_usage.year, ecs_chargeback_bu_usage.line_item_usage_account_id, total_usage, ec2_cost

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${RolePrefix}${CFDataName}-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${RolePrefix}StepFunction-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "ModuleLambdaGlueExecutionPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource: !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/${RolePrefix}${CFDataName}-Crawler'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref AccountCollectorLambdaARN
                  - !Sub 
                    - '${Lambda}'
                    - Lambda: !GetAtt LambdaFunction.Arn

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      StateMachineName: !Sub '${RolePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: |-
        {
          "Comment": "This state machine orchestrates the collection of AWS ${CFDataName} data and invokes the Glue Crawler to update Athena",
          "StartAt": "Account Collector Invoke",
          "States": {
            "Account Collector Invoke": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${AccountCollectorLambdaARN}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Module Map"
            },
            "Module Map": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Module Invoke",
                "States": {
                  "Module Invoke": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "OutputPath": "$.Payload",
                    "Parameters": {
                      "FunctionName": "${LambdaFunction}",
                      "Payload": {
                        "account.$": "$.account"
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "End": true
                  }
                }
              },
              "ItemsPath": "$.accountList",
              "Next": "Start Crawler"
            },
            "Start Crawler": {
              "Type": "Task",
              "Parameters": {
                "Name": "${Crawler}"
              },
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "End": true
            }
          },
          "TimeoutSeconds": 1200
        }
      DefinitionSubstitutions: 
        CFDataName: !Ref CFDataName
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        LambdaFunction: !GetAtt LambdaFunction.Arn
        Crawler: !Sub '${RolePrefix}${CFDataName}-Crawler'

  ScheduleExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${RolePrefix}EventBridge-Scheduler-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "ExecuteStateMachinePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: 
                  - !GetAtt StepFunction.Arn

  ModuleRefreshScheduleRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: !Sub "Scheduler-For-${CFDataName}"
      Name: !Sub '${CFDataName}-ModuleRefreshRule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      Targets:
        - Id: !Sub '${CFDataName}-ModuleRefresh'
          Arn: !GetAtt StepFunction.Arn
          RoleArn: !GetAtt ScheduleExecutionRole.Arn

  LambdaAnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName