AWSTemplateFormatVersion: '2010-09-09'
Description: Collects ECS Cluster and service data and places into a bucket in the management account
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: ecs-chargeback
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  StepFunctionTemplate:
    Type: String
    Description: JSON representation of common StepFunction template
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  CURTable:
    Type: String
    Description: The name of your Cost and Usage Report table in Athena
    Default: cid_cur.cur

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${RolePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.10
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import os
          import json
          import logging
          from datetime import date, datetime

          import boto3
          from botocore.exceptions import ClientError
          from boto3.session import Session

          bucket = os.environ["BUCKET_NAME"]
          prefix = os.environ["PREFIX"]
          role_name = os.environ['ROLENAME']
          local_file = "/tmp/data.json"

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          def lambda_handler(event, context):
              collection_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              if 'account' not in event:
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )

              try:
                  account = json.loads(event["account"])
                  account_id = account["account_id"]
                  account_name = account["account_name"]
                  payer_id = account["payer_id"]
                  logger.info(f"Collecting data for account: {account_id}")
                  session = assume_session(account_id)
                  ec2_regions = [region['RegionName'] for region in session.client('ec2').describe_regions()['Regions']]
                  ecs_regions = boto3.Session().get_available_regions('ecs')
                  regions = list(set(ec2_regions).intersection(ecs_regions))

                  with open(local_file, "w") as f:
                      for region in regions:
                          services_counter = 0
                          try:
                              client = session.client("ecs", region_name=region)
                              for page in client.get_paginator("list_clusters").paginate():
                                  for cluster in page["clusterArns"]:
                                      services_list = client.list_services(
                                          cluster=cluster.split("/")[1],
                                          maxResults=100
                                      )
                                      for i in services_list["serviceArns"]:
                                          services = client.describe_services(
                                              cluster=cluster.split("/")[1],
                                              services=[i.split("/")[2],],
                                              include=["TAGS"],
                                          )
                                          for service in services["services"]:
                                              data = {
                                                  "cluster": cluster.split("/")[1],
                                                  "services": service.get("serviceName"),
                                                  "servicesARN": i, #.split("/")[2]
                                                  "tags": service.get("tags"),
                                                  "account_id":account_id
                                              }
                                              jsondata = json.dumps(data)
                                              services_counter += 1
                                              #print(jsondata)
                                              f.write(jsondata + "\n")
                              print(f"{services_counter} services gathered in {region}")
                          except Exception as exc:
                              if 'The security token included in the request is invalid' in str(exc):
                                  logging.info(f'region {region} is not activated in {account_id}')
                              else:
                                  print(region, account_id, type(exc), exc)

                  if os.path.getsize(local_file) == 0:
                      print(f"No data in file for {prefix}")
                  else:
                      today = date.today()
                      year = today.year
                      month = today.month
                      day = today.day
                      key = f"{prefix}/{prefix}-data/payer_id={payer_id}/year={year}/month={month}/{account_id}-{year}-{month}-{day}.json"
                      client = boto3.client("s3")
                      client.upload_file(local_file, bucket, key)
                      print(f"Data in s3 - {key}")
              except Exception as exc:
                  logging.warning(exc)

          def assume_session(account_id):
              cred = boto3.client('sts').assume_role(
                  RoleArn=f"arn:aws:iam::{account_id}:role/{role_name}",
                  RoleSessionName="data_collection"
              )['Credentials']
              return boto3.Session(
                  aws_access_key_id=cred['AccessKeyId'],
                  aws_secret_access_key=cred['SecretAccessKey'],
                  aws_session_token=cred['SessionToken']
              )

          def list_ecs_regions():
              return boto3.Session().get_available_regions('ecs')

      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref MultiAccountRoleName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${RolePrefix}${CFDataName}-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${RolePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionString: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${RolePrefix}${CFDataName}-Crawler"]'
        CollectionType: "LINKED"
        Params: ''

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${RolePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN
        Input: !Sub '{"module_lambda":"${LambdaFunction.Arn}","crawlers": ["${RolePrefix}${CFDataName}-Crawler"]}'

  LambdaAnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaClusterMetadataView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_cluster_metadata_view
      QueryString: |
          CREATE OR REPLACE VIEW ecs_chargeback_cluster_metadata_view AS 
          SELECT
            *
          , "tag"."value"
          FROM
            ( ecs_chargeback_ecs_services_clusters_data
              CROSS JOIN UNNEST("tags") t (tag)
            )
          WHERE ("tag"."key" = 'BU')

  AthenaEc2ClusterCostsView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_ec2_cluster_costs
      QueryString: !Sub |
        CREATE OR REPLACE VIEW ecs_chargeback_ec2_cluster_costs AS
        SELECT
          line_item_product_code
        , line_item_usage_account_id
        , line_item_resource_id
        , line_item_usage_type
        , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN line_item_usage_amount WHEN (line_item_line_item_type = 'DiscountedUsage') THEN line_item_usage_amount WHEN (line_item_line_item_type = 'Usage') THEN line_item_usage_amount ELSE 0 END)) sum_line_item_usage_amount
        , sum(line_item_unblended_cost) unblended_cost
        , sum((CASE WHEN (line_item_line_item_type = 'SavingsPlanCoveredUsage') THEN savings_plan_savings_plan_effective_cost WHEN (line_item_line_item_type = 'SavingsPlanRecurringFee') THEN (savings_plan_total_commitment_to_date - savings_plan_used_commitment) WHEN (line_item_line_item_type = 'SavingsPlanNegation') THEN 0 WHEN (line_item_line_item_type = 'SavingsPlanUpfrontFee') THEN 0 WHEN (line_item_line_item_type = 'DiscountedUsage') THEN reservation_effective_cost WHEN (line_item_line_item_type = 'RIFee') THEN (reservation_unused_amortized_upfront_fee_for_billing_period + reservation_unused_recurring_fee) ELSE line_item_unblended_cost END)) sum_line_item_amortized_cost
        , month
        , year
        FROM
          ${CURTable}
        WHERE (((product_product_name = 'Amazon Elastic Compute Cloud') AND ((resource_tags_user_name LIKE '%ECS%') OR (resource_tags_user_name LIKE '%ecs%'))) AND (((line_item_usage_type LIKE '%BoxUsage%') OR (line_item_usage_type LIKE '%Spot%')) OR (line_item_usage_type LIKE '%%EBS%%Volume%%')))
        GROUP BY resource_tags_user_name, line_item_product_code, line_item_usage_account_id, line_item_resource_id, line_item_usage_type, month, year

  AthenaBUUsageView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_bu_usage
      QueryString: !Sub |
        CREATE OR REPLACE VIEW ecs_chargeback_bu_usage AS 
        SELECT
          "bill_payer_account_id"
        , "line_item_product_code"
        , "line_item_usage_account_id"
        , "line_item_resource_id"
        , "task"
        , "resource_tags_aws_ecs_service_Name"
        , "line_item_usage_type"
        , "line_item_operation"
        , "sum"(CAST("sum_line_item_usage_amount" AS double)) "sum_line_item_usage_amount"
        , "cur"."month"
        , "cur"."year"
        , "cluster"
        , "services"
        , "servicearn"
        , "account_id"
        , "value"
        FROM
          ((
          SELECT
            "bill_payer_account_id"
          , "line_item_product_code"
          , "line_item_usage_account_id"
          , "line_item_resource_id"
          , "split"("line_item_resource_id", '/')[2] "task"
          , "resource_tags_aws_ecs_service_Name"
          , "line_item_usage_type"
          , "line_item_operation"
          , "sum"(CAST("line_item_usage_amount" AS double)) "sum_line_item_usage_amount"
          , "month"
          , "year"
          FROM
            ${CURTable}
          WHERE ((("line_item_operation" = 'ECSTask-EC2') AND ("line_item_product_code" IN ('AmazonECS'))) AND ("line_item_usage_type" LIKE '%GB%'))
          GROUP BY "bill_payer_account_id", "line_item_usage_account_id", "line_item_product_code", "line_item_operation", "line_item_resource_id", "resource_tags_aws_ecs_service_Name", "line_item_usage_type", "line_item_operation", "month", "year"
        )  cur
        LEFT JOIN (
          SELECT
            "cluster"
          , "services"
          , "servicearn"
          , "value"
          , "year"
          , "month"
          , "account_id"
          FROM
            ecs_chargeback_cluster_metadata_view
        )  clusters_data ON ((("clusters_data"."account_id" = "cur"."line_item_usage_account_id") AND (("clusters_data"."services" = "cur"."resource_tags_aws_ecs_service_name") AND ("clusters_data"."year" = "cur"."year"))) AND ("clusters_data"."month" = "cur"."month")))
        GROUP BY "bill_payer_account_id", "line_item_usage_account_id", "line_item_product_code", "line_item_operation", "line_item_resource_id", "resource_tags_aws_ecs_service_Name", "line_item_usage_type", "line_item_operation", "cur"."month", "cur"."year", "cluster", "services", "servicearn", "value", "task", "account_id"

  AthenaEC2CChargeBackQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: ecs_chargeback_report
      QueryString: |
        SELECT ecs_chargeback_bu_usage.line_item_usage_account_id, sum(sum_line_item_usage_amount) AS task_usage, total_usage, (sum(sum_line_item_usage_amount)/total_usage) as percent,  ec2_cost, ((sum(sum_line_item_usage_amount)/total_usage)*ec2_cost) as ecs_cost,
          "cluster",
          services,
          servicearn,
          value,
          ecs_chargeback_bu_usage.month,
          ecs_chargeback_bu_usage.year
        FROM "ecs_chargeback_bu_usage"
        LEFT JOIN (select line_item_usage_account_id, sum(sum_line_item_usage_amount) as total_usage, year, month from "ecs_chargeback_bu_usage" where "cluster" <> '' group by line_item_usage_account_id, year, month) sum
        on sum.line_item_usage_account_id = ecs_chargeback_bu_usage.line_item_usage_account_id
        and sum.month=ecs_chargeback_bu_usage.month
        and sum.year=ecs_chargeback_bu_usage.year
        LEFT JOIN
        (SELECT line_item_usage_account_id, month, year, sum(sum_line_item_amortized_cost) as ec2_cost FROM "ec2_cluster_costs_view" group by  line_item_usage_account_id,month,year) ec2_cost
        on ec2_cost.month=ecs_chargeback_bu_usage.month
        and ec2_cost.year=ecs_chargeback_bu_usage.year
        and ec2_cost.line_item_usage_account_id=ecs_chargeback_bu_usage.line_item_usage_account_id
        WHERE "cluster" <> ''  and  if((date_format(current_timestamp , '%M') = 'January'),ecs_chargeback_bu_usage.month = '12', ecs_chargeback_bu_usage.month = CAST((month(now())-1) AS VARCHAR) )
        and  if((date_format(current_timestamp , '%M') = 'January'), ecs_chargeback_bu_usage.year = CAST((year(now())-1) AS VARCHAR) ,ecs_chargeback_bu_usage.year = CAST(year(now()) AS VARCHAR))
        GROUP BY  "cluster", services, servicearn, value, ecs_chargeback_bu_usage.month, ecs_chargeback_bu_usage.year, ecs_chargeback_bu_usage.line_item_usage_account_id, total_usage, ec2_cost
