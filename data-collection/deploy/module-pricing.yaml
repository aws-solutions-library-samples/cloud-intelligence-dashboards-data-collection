AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Pricing data
Transform: 'AWS::LanguageExtensions'
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that exists or needs to be created to hold costanomaly information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold costanomaly information
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: pricing
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AwsServices:
    Type: CommaDelimitedList
    Default: AmazonRDS, AmazonEC2, AmazonElastiCache, AmazonES, AWSComputeSavingsPlan, RegionNames
    Description: Services for pulling price data
  CodeBucket:
    Type: String
    Description: S3 Bucket that exists and holds code
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  RdsGravitonPath:
    Type: String
    Description: Path to the RDS Graviton mapping file
    Default: cfn/data-collection/data/rds_graviton_mapping.csv

Mappings:
  ServicesMap:
    AmazonRDS:
      path: rds
      partition:
          - { Name: region, Type: string }
      fields:
          - { Type: string, Name: sku }
          - { Type: string, Name: offertermcode }
          - { Type: string, Name: ratecode }
          - { Type: string, Name: termtype }
          - { Type: string, Name: pricedescription }
          - { Type: string, Name: effectivedate } # cannot do timestamp or date here
          - { Type: string, Name: startingrange }
          - { Type: string, Name: endingrange }
          - { Type: string, Name: unit }
          - { Type: double, Name: priceperunit }
          - { Type: string, Name: currency }
          - { Type: string, Name: relatedto }
          - { Type: string, Name: leasecontractlength }
          - { Type: string, Name: purchaseoption }
          - { Type: string, Name: offeringclass }
          - { Type: string, Name: product family }
          - { Type: string, Name: servicecode }
          - { Type: string, Name: location }
          - { Type: string, Name: location type }
          - { Type: string, Name: instance type }
          - { Type: string, Name: current generation }
          - { Type: string, Name: instance family }
          - { Type: string, Name: vcpu }
          - { Type: string, Name: physical processor }
          - { Type: string, Name: clock speed }
          - { Type: string, Name: memory }
          - { Type: string, Name: storage }
          - { Type: string, Name: network performance }
          - { Type: string, Name: processor architecture }
          - { Type: string, Name: storage media }
          - { Type: string, Name: volume type }
          - { Type: string, Name: min volume size }
          - { Type: string, Name: max volume size }
          - { Type: string, Name: engine code }
          - { Type: string, Name: database engine }
          - { Type: string, Name: database edition }
          - { Type: string, Name: license model }
          - { Type: string, Name: deployment option }
          - { Type: string, Name: group }
          - { Type: string, Name: group description }
          - { Type: string, Name: usagetype }
          - { Type: string, Name: operation }
          - { Type: string, Name: acu }
          - { Type: string, Name: dedicated ebs throughput }
          - { Type: string, Name: deployment model }
          - { Type: string, Name: enhanced networking supported }
          - { Type: string, Name: instance type family }
          - { Type: string, Name: normalization size factor }
          - { Type: string, Name: pricing unit }
          - { Type: string, Name: processor features }
          - { Type: string, Name: region code }
          - { Type: string, Name: servicename }
          - { Type: string, Name: volume name }
          - { Type: string, Name: engine media type }
    AmazonEC2:
      path: ec2
      partition:
          - { Name: region, Type: string }
      fields:
          - { Type: string, Name: sku }
          - { Type: string, Name: offertermcode }
          - { Type: string, Name: ratecode }
          - { Type: string, Name: termtype }
          - { Type: string, Name: pricedescription }
          - { Type: string, Name: effectivedate }
          - { Type: string, Name: startingrange }
          - { Type: string, Name: endingrange }
          - { Type: string, Name: unit }
          - { Type: double, Name: priceperunit }
          - { Type: string, Name: currency }
          - { Type: string, Name: product family }
          - { Type: string, Name: servicecode }
          - { Type: string, Name: location }
          - { Type: string, Name: location type }
          - { Type: string, Name: instance type }
          - { Type: string, Name: current generation }
          - { Type: string, Name: instance family }
          - { Type: string, Name: vcpu }
          - { Type: string, Name: physical processor }
          - { Type: string, Name: clock speed }
          - { Type: string, Name: memory }
          - { Type: string, Name: storage }
          - { Type: string, Name: network performance }
          - { Type: string, Name: processor architecture }
          - { Type: string, Name: storage media }
          - { Type: string, Name: volume type }
          - { Type: string, Name: max volume size }
          - { Type: string, Name: max iops/volume }
          - { Type: string, Name: max iops burst performance }
          - { Type: string, Name: max throughput/volume }
          - { Type: string, Name: tenancy }
          - { Type: string, Name: operating system }
          - { Type: string, Name: license model }
          - { Type: string, Name: group }
          - { Type: string, Name: group description }
          - { Type: string, Name: usagetype }
          - { Type: string, Name: operation }
          - { Type: string, Name: availabilityzone }
          - { Type: string, Name: capacitystatus }
          - { Type: string, Name: classicnetworkingsupport }
          - { Type: string, Name: dedicated ebs throughput }
          - { Type: string, Name: ecu }
          - { Type: string, Name: enhanced networking supported }
          - { Type: string, Name: gpu }
          - { Type: string, Name: gpu memory }
          - { Type: string, Name: instance }
          - { Type: string, Name: instancesku }
          - { Type: string, Name: intel avx2 available }
          - { Type: string, Name: intel avx available }
          - { Type: string, Name: intel turbo available }
          - { Type: string, Name: marketoption }
          - { Type: string, Name: normalization size factor }
          - { Type: string, Name: pre installed s/w }
          - { Type: string, Name: processor features }
          - { Type: string, Name: region code }
          - { Type: string, Name: servicename }
          - { Type: string, Name: volume api name }
          - { Type: string, Name: vpcnetworkingsupport }
          - { Type: string, Name: relatedto }
          - { Type: string, Name: leasecontractlength }
          - { Type: string, Name: purchaseoption }
          - { Type: string, Name: offeringclass }
          - { Type: string, Name: provisioned }
          - { Type: string, Name: instance capacity - 12xlarge }
          - { Type: string, Name: instance capacity - 16xlarge }
          - { Type: string, Name: instance capacity - 18xlarge }
          - { Type: string, Name: instance capacity - 24xlarge }
          - { Type: string, Name: instance capacity - 2xlarge }
          - { Type: string, Name: instance capacity - 32xlarge }
          - { Type: string, Name: instance capacity - 4xlarge }
          - { Type: string, Name: instance capacity - 8xlarge }
          - { Type: string, Name: instance capacity - 9xlarge }
          - { Type: string, Name: instance capacity - large }
          - { Type: string, Name: instance capacity - metal }
          - { Type: string, Name: instance capacity - xlarge }
          - { Type: string, Name: physical cores }
          - { Type: string, Name: product type }
          - { Type: string, Name: resource type }
          - { Type: string, Name: snapshotarchivefeetype }
          - { Type: string, Name: ebs optimized }
          - { Type: string, Name: transfer type }
          - { Type: string, Name: from location }
          - { Type: string, Name: from location type }
          - { Type: string, Name: to location }
          - { Type: string, Name: to location type }
          - { Type: string, Name: elastic graphics type }
          - { Type: string, Name: from region code }
          - { Type: string, Name: instance capacity - 10xlarge }
          - { Type: string, Name: instance capacity - medium }
          - { Type: string, Name: to region code }
    AmazonElastiCache:
      path: elasticache
      partition:
          - { Name: region, Type: string }
      fields:
          - { Type: string, Name: sku }
          - { Type: string, Name: offertermcode }
          - { Type: string, Name: ratecode }
          - { Type: string, Name: termtype }
          - { Type: string, Name: pricedescription }
          - { Type: string, Name: effectivedate }
          - { Type: string, Name: startingrange }
          - { Type: string, Name: endingrange }
          - { Type: string, Name: unit }
          - { Type: double, Name: priceperunit }
          - { Type: string, Name: currency }
          - { Type: string, Name: leasecontractlength }
          - { Type: string, Name: purchaseoption }
          - { Type: string, Name: offeringclass }
          - { Type: string, Name: product family }
          - { Type: string, Name: servicecode }
          - { Type: string, Name: location }
          - { Type: string, Name: location type }
          - { Type: string, Name: instance type }
          - { Type: string, Name: current generation }
          - { Type: string, Name: instance family }
          - { Type: string, Name: vcpu }
          - { Type: string, Name: storage }
          - { Type: string, Name: storage media }
          - { Type: string, Name: usagetype }
          - { Type: string, Name: operation }
          - { Type: string, Name: ecu }
          - { Type: string, Name: memory (gib) }
          - { Type: string, Name: region code }
          - { Type: string, Name: servicename }
          - { Type: string, Name: compute type }
    AmazonES:
      path: opensearch
      partition:
          - { Name: region, Type: string }
      fields:
          - { Type: string, Name: sku }
          - { Type: string, Name: offertermcode }
          - { Type: string, Name: ratecode }
          - { Type: string, Name: termtype }
          - { Type: string, Name: pricedescription }
          - { Type: string, Name: effectivedate }
          - { Type: string, Name: startingrange }
          - { Type: string, Name: endingrange }
          - { Type: string, Name: unit }
          - { Type: double, Name: priceperunit }
          - { Type: string, Name: currency }
          - { Type: string, Name: leasecontractlength }
          - { Type: string, Name: purchaseoption }
          - { Type: string, Name: offeringclass }
          - { Type: string, Name: product family }
          - { Type: string, Name: servicecode }
          - { Type: string, Name: location }
          - { Type: string, Name: location type }
          - { Type: string, Name: instance type }
          - { Type: string, Name: current generation }
          - { Type: string, Name: instance family }
          - { Type: string, Name: vcpu }
          - { Type: string, Name: storage }
          - { Type: string, Name: storage media }
          - { Type: string, Name: usagetype }
          - { Type: string, Name: operation }
          - { Type: string, Name: ecu }
          - { Type: string, Name: memory (gib) }
          - { Type: string, Name: region code }
          - { Type: string, Name: servicename }
          - { Type: string, Name: compute type }
    AWSComputeSavingsPlan:
      path: computesavingsplan
      partition:
          - { Name: region, Type: string }
      fields:
          - { Type: string, Name: sku }
          - { Type: string, Name: ratecode }
          - { Type: string, Name: unit }
          - { Type: string, Name: effectivedate }
          - { Type: double, Name: discountedrate }
          - { Type: string, Name: currency }
          - { Type: string, Name: discountedsku }
          - { Type: string, Name: discountedservicecode }
          - { Type: string, Name: discountedusagetype }
          - { Type: string, Name: discountedoperation }
          - { Type: string, Name: purchaseoption }
          - { Type: string, Name: leasecontractlength }
          - { Type: string, Name: leasecontractlengthunit }
          - { Type: string, Name: servicecode }
          - { Type: string, Name: usagetype }
          - { Type: string, Name: operation }
          - { Type: string, Name: description }
          - { Type: string, Name: instance family }
          - { Type: string, Name: location }
          - { Type: string, Name: location type }
          - { Type: string, Name: granularity }
          - { Type: string, Name: product family }
    RegionNames:
      path: regionnames
      partition:
          - { Name: partition, Type: string }
      fields:
          - { Type: string, Name: region }
          - { Type: string, Name: regionname }
          - { Type: string, Name: endpoint }
          - { Type: string, Name: protocol }
    RDSGraviton:
      path: rdsgraviton
      partition:
          - { Name: partition, Type: string }
      fields:
          - { Type: string, Name: dbtype }
          - { Type: string, Name: databaseengine }
          - { Type: string, Name: instancetype }
          - { Type: string, Name: graviton_instancetype }

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub 'arn:aws:s3:::${CodeBucket}/*'
        - PolicyName: "SSM"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}::parameter/aws/service/global-infrastructure/regions/*/longName"

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "LambdaFunction to retrieve ${CFDataName}"
      Runtime: python3.10
      Architectures: [x86_64]
      ReservedConcurrentExecutions: 0
      Code:
        ZipFile: |
          import os
          import json
          import urllib3
          import logging

          import boto3

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          OFFERS_URL = 'https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/index.json'
          BASE_URL = '/'.join(OFFERS_URL.split('/')[:3])
          CODE_BUCKET = os.environ['CODE_BUCKET']
          BUCKET_NAME = os.environ["BUCKET_NAME"]
          PREFIX = os.environ["DEST_PREFIX"]
          REGIONS = [r.strip() for r in os.environ["REGIONS"].split(',') if r]
          TMP_FILE = "/tmp/data.json"
          RDS_GRAVITON_PATH = os.environ["RDS_GRAVITON_PATH"]

          def get_json(url):
              return json.loads(urllib3.PoolManager().request('GET', url).data)

          def upload_pricing(service, path):
              s3 = boto3.client('s3')
              http = urllib3.PoolManager()
              offers = get_json(OFFERS_URL)['offers']

              errors = ''

              logger.info(f'Getting regional pricing for {service}')
              try:
                  if service == 'AWSComputeSavingsPlan':
                      url = offers['AmazonEC2']['currentSavingsPlanIndexUrl']
                  else:
                      url = offers[service]['currentRegionIndexUrl']
                  regions = get_json(BASE_URL + url)["regions"]
              except Exception as exc:
                  err = f'{service}: {exc}'
                  logger.warning(err)
                  return {
                      'statusCode': 500,
                      'errors': err,
                  }
              logger.debug(f"Regions {json.dumps(regions)}")
              if isinstance(regions, dict): # pricing data has different formats
                  regions = regions.values()

              # pull pricing for each region
              for region in regions:
                  region_code = region["regionCode"]
                  if REGIONS and (region_code not in REGIONS):
                      logger.debug(f'Filtering out {region_code}')
                      continue
                  try:
                      version_url =  region.get("versionUrl") or region.get("currentVersionUrl")
                      assert version_url
                      region_url = BASE_URL + version_url.replace(".json", ".csv")

                      # Starting Download
                      file_obj = http.request('GET', region_url, preload_content=False)

                      # Skip 5 lines
                      for _ in range(5):
                          file_obj.readline()

                      # Upload
                      key = f"pricing/pricing-{path}-data/region={region_code}/index.csv"
                      res = s3.upload_fileobj(Fileobj=file_obj, Bucket=BUCKET_NAME, Key=key)
                      logger.debug(f'{res} Uploaded to s3://{BUCKET_NAME}/{key}')
                  except Exception as exc:
                      err = f'{service}/{region_code}: {exc}'
                      logger.warning(err)
                      logger.exception(exc)
                      errors += err + '\n'
                      raise
              return {
                  'statusCode': 200,
                  'errors': errors,
              }

          def s3copy(src_bucket, src_key, dest_bucket, dest_key):
              boto3.resource('s3').Bucket(dest_bucket).copy({
                    'Bucket': src_bucket,
                    'Key': src_key
                  },
                  dest_key
              )
              print(f'added file {dest_key}')

          def process_region_list(regions):
              logger.info(f"Processing region list {regions}")
              ssm_client = boto3.client('ssm')
              lines = []
              for region in regions:
                  long_name = ssm_client.get_parameter(Name=f"/aws/service/global-infrastructure/regions/{region}/longName")["Parameter"]["Value"]
                  lines.append(",".join([region,long_name,f"rds.{region}.amazonaws.com","HTTPS"]))

              with open(TMP_FILE, "w") as f:
                  f.write("Region,Long Name,Endpoint,Protocol\n")
                  f.write("\n".join(lines))

              # Upload
              key = f"pricing/pricing-regionnames-data/pricing_region_names/pricing_region_names.csv"
              res = boto3.client('s3').upload_file(TMP_FILE, Bucket=BUCKET_NAME, Key=key)
              logger.info(f"Uploaded pricing_region_names")
              return {
                  'statusCode': 200
              }

          def lambda_handler(event, context):
              logger.info(f"Incoming event: {event}")
              try:
                  service = event['service']
                  path = event['path']
              except Exception as exc:
                  logger.error('please provide service and path')
                  raise Exception(f'({type(exc).__name__}) raised. Please provide service and path parameters.')

              if service == "RegionNames":
                  res = process_region_list(REGIONS)
                  return {
                      'statusCode': 200,
                      'body': {service: res}
                  }
              else:
                  res = upload_pricing(service, path)

              # FIXME: move it to separate lambda?
              try:
                  s3copy(
                      CODE_BUCKET, RDS_GRAVITON_PATH,
                      BUCKET_NAME, 'pricing/pricing-rdsgraviton-data/rds_graviton_mapping.csv',
                  )
              except Exception as exc:
                  res['errors'] += f'rds_graviton_mapping: {exc}'

              return {
                  'statusCode': 200,
                  'body': {service: res}
              }
      Handler: 'index.lambda_handler'
      MemorySize: 2880
      Timeout: 600
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          CODE_BUCKET: !Ref CodeBucket
          DEST_PREFIX: !Ref CFDataName
          REGIONS: !Ref RegionsInScope
          RDS_GRAVITON_PATH: !Ref RdsGravitonPath
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  'Fn::ForEach::Service':
    - AwsService
    - !Ref AwsServices
    - 'ScheduleRefresh${AwsService}':
        Type: 'AWS::Scheduler::Schedule'
        Properties:
          Description: !Sub 'Scheduler for the ODC ${CFDataName}-${AwsService} module'
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-RefreshSchedule'
          ScheduleExpression: !Ref Schedule
          State: ENABLED
          FlexibleTimeWindow:
            MaximumWindowInMinutes: 30
            Mode: 'FLEXIBLE'
          Target:
            Arn: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}${CFDataName}-${AwsService}-StateMachine'
            RoleArn: !Ref SchedulerExecutionRoleARN

      'ModuleStepFunction${AwsService}':
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-StateMachine'
          StateMachineType: STANDARD
          RoleArn: !Ref StepFunctionExecutionRoleARN
          DefinitionString: |
            {
              "Comment": "Orchestrate the collection of pricing data",
              "StartAt": "PricingCollectorInvoke",
              "States": {
                "PricingCollectorInvoke": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "Payload": {
                      "service": "${Service}",
                      "path": "${Path}"
                    },
                    "FunctionName": "arn:aws:lambda:${DeployRegion}:${Account}:function:${Prefix}pricing-Lambda"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "CrawlerStepFunctionStartExecution"
                },
                "CrawlerStepFunctionStartExecution": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::states:startExecution.sync:2",
                  "Parameters": {
                    "StateMachineArn": "arn:aws:states:${DeployRegion}:${Account}:stateMachine:${Prefix}CrawlerExecution-StateMachine",
                    "Input": {
                      "crawlers": ${Crawlers}
                    }
                  },
                  "End": true
                }
              },
              "TimeoutSeconds": 1200
            }
          DefinitionSubstitutions:
            Service: !Ref AwsService
            Path: !FindInMap [ServicesMap, !Ref AwsService, path]
            Prefix: !Ref ResourcePrefix
            Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-${AwsService}-Crawler"]'
            Module: !Ref CFDataName
            DeployRegion: !Ref AWS::Region
            Account: !Ref AWS::AccountId

      'PricingCrawler${AwsService}':
        Type: AWS::Glue::Crawler
        Properties:
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-Crawler'
          Role: !Ref GlueRoleARN
          DatabaseName: !Ref DatabaseName
          SchemaChangePolicy:
            DeleteBehavior: LOG
            UpdateBehavior: LOG
          Targets:
            S3Targets:
              - Path:
                  Fn::Sub:
                    - "s3://${DestinationBucket}/${CFDataName}/pricing-${path}-data/"
                    - path: !FindInMap [ServicesMap, !Ref AwsService, path]
          Configuration: |
            {
              "Version": 1.0,
              "Grouping": {
                "TableGroupingPolicy": "CombineCompatibleSchemas"
              },
              "CrawlerOutput": {
                "Tables": {"AddOrUpdateBehavior": "MergeNewColumns"},
                "Partitions": {"AddOrUpdateBehavior": "InheritFromTable"}
              }
            }

      'PricingTable${AwsService}':
        Type: AWS::Glue::Table
        Properties:
          CatalogId: !Ref "AWS::AccountId"
          DatabaseName: !Ref DatabaseName
          TableInput:
            Name:
              Fn::Sub:
                - 'pricing_${path}_data' # note '_' not '-'
                - path: !FindInMap [ServicesMap, !Ref AwsService, path]
            Owner: owner
            Retention: 0
            TableType: EXTERNAL_TABLE
            Parameters:
              compressionType: none
              delimiter: ','
              classification: csv
              skip.header.line.count: '1'
              UPDATED_BY_CRAWLER: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-Crawler'
            PartitionKeys: !FindInMap [ServicesMap, !Ref AwsService, partition]
            StorageDescriptor:
              Columns: !FindInMap [ServicesMap, !Ref AwsService, fields]
              InputFormat: org.apache.hadoop.mapred.TextInputFormat
              Location:
                Fn::Sub:
                  - "s3://${DestinationBucket}/${CFDataName}/pricing-${path}-data/"
                  - path: !FindInMap [ServicesMap, !Ref AwsService, path]
              OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              SerdeInfo:
                Parameters:
                  quoteChar: '"'
                  separatorChar: ','
                  serialization.format: '1'
                SerializationLibrary: org.apache.hadoop.hive.serde2.OpenCSVSerde # Need a specific lib for quotes

  LambdaAnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName