AWSTemplateFormatVersion: "2010-09-09"
Description: Retrieves AWS Security Hub details across AWS organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that exists or needs to be created to hold costanomaly information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold costanomaly information
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: securityhub-events
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: !Sub "${CFDataName}-ManagementAccount-LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in all Management accounts
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Sub "${DestinationBucketARN}"
        - PolicyName: !Sub "${CFDataName}-detail-StateMachineExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}${CFDataName}-detail-StateMachine"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  IAMRoleAmazonEventBridgeInvokeFirehose:
    UpdateReplacePolicy: "Delete"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/service-role/"
      MaxSessionDuration: 3600
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-EBInvoke_Firehose"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "events.amazonaws.com"
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
              reason: "Need explicit name to identify role actions"

  KinesisFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-KinesisFireHoseRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: "SecurityHub-S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:ListBucketMultipartUploads"
                - "s3:AbortMultipartUpload"
                Resource:
                - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                Resource:
                - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource:
                - !Sub "${LambdaFunction}/*"
        - PolicyName: !Sub "${CFDataName}-detail-StateMachineExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}${CFDataName}-detail-StateMachine"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  EventRuleSechubKinesisIntegration:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        detail-type:
        - "Security Hub Findings - Imported"
        source:
        - "aws.securityhub"
      Targets:
      - Arn: !GetAtt SecHubEventsFirehoseDeliveryStream.Arn
        RoleArn: !GetAtt IAMRoleAmazonEventBridgeInvokeFirehose.Arn
        Id: "FirehoseDeliveryStream"
      State: "ENABLED"
      Name: "${ResourcePrefix}${CFDataName}-SecHubEvents"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.10
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import json
          import os
          import logging
          import re
          import base64
          from botocore.exceptions import ClientError

          def rename_keys(payload):
              if isinstance(payload, dict):
                  renamed_payload = {}
                  for key, value in payload.items():
                      renamed_key = re.sub(r'\W+', '_', key)
                      renamed_value = rename_keys(value)
                      renamed_payload[renamed_key] = renamed_value
                  return renamed_payload
              elif isinstance(payload, list):
                  renamed_list = []
                  for item in payload:
                      renamed_item = rename_keys(item)
                      renamed_list.append(renamed_item)
                  return renamed_list
              elif isinstance(payload, (str, int, float, bool, type(None))):
                  return payload
              else:
                  if hasattr(payload, "__dict__"):
                      renamed_payload = {}
                      for key, value in payload.__dict__.items():
                          renamed_key = re.sub(r'\W+', '_', key)
                          renamed_value = rename_keys(value)
                          renamed_payload[renamed_key] = renamed_value
                      return renamed_payload
                  else:
                      return payload

          def lambda_handler(event, context):
              logger = logging.getLogger()
              payload = event['records']
              transformed_records = []

              for record in payload:
                  data = record['data']
                  decoded_data = base64.b64decode(data).decode('utf-8')
                  print(f"Input record JSON: {decoded_data}")
                  renamed_payload = rename_keys(json.loads(decoded_data))
                  flattened_data = json.dumps(renamed_payload, separators=(',', ':'))
                  transformed_record = {
                      'recordId': record['recordId'],
                      'result': 'Ok',
                      'data': base64.b64encode(flattened_data.encode('utf-8')).decode('utf-8')
                  }
                  print(f"Transformed record: {transformed_record}")
                  transformed_records.append(transformed_record)
              return {'records': transformed_records}
      Handler: "index.lambda_handler"
      MemorySize: 2688
      Timeout: 900
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60
    FirehoseLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub "/aws/kinesis/${SecHubEventsFirehoseDeliveryStream}"
        RetentionInDays: 60

  SecHubEventsFirehoseDeliveryStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: '${ResourcePrefix}${CFDataName}-detail-stream'
        DeliveryStreamType: DirectPut
        DeliveryStreamEncryptionConfigurationInput:
          KeyType: AWS_OWNED_CMK
        ExtendedS3DestinationConfiguration:
          BucketARN: !GetAtt DestinationBucketARN.Arn
          Prefix: !Sub "sechub_events/managementid=${AWS::AccountId}/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/"
          ErrorOutputPrefix: "aws-sechub-logs-firehose-error/"
          RoleARN: !GetAtt kinesisFirehoseRole.Arn
          CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref FirehoseLogGroup
          BufferingHints:
                IntervalInSeconds: 900
                SizeInMBs: 30
          CompressionFormat: "GZIP"
          ProcessingConfiguration:
              Enabled: true
              Processors:
              - Type: Lambda
                Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt LambdaFunctiontransformationsechub.Arn
                - ParameterName: BufferIntervalInSeconds
                  ParameterValue: 600
                - ParameterName: BufferSizeInMBs
                  ParameterValue: 3

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-detail-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-detail-data/"
  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName