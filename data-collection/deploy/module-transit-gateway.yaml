---
AWSTemplateFormatVersion: '2010-09-09'
Description: Main CF template that builds shared resources and other stacks
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: transit-gateway
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  StepFunctionTemplate:
    Type: String
    Description: JSON representation of common StepFunction template
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  CURTable:
    Type: String
    Description: The name of your Cost and Usage Report table in Athena
    Default: cid_cur.cur

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.10
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import os
          import json
          import logging
          from datetime import date, datetime, timedelta

          import boto3
          import botocore

          class ParamsBase():
              def __init__(self, env, additional_params):
                  logger.setLevel(getattr(logging, env.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))
                  logger.debug("Loading parameters")
                  self.collection_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                  self.tmp_file = "/tmp/tmp.json"
                  self.bucket = env["BUCKET_NAME"]
                  self.role_name = env["ROLE_NAME"]
                  self.module_name = env["MODULE_NAME"]
                  self.regions = [r.strip() for r in env.get("REGIONS","us-east-1").split(',') if r]
                  self.boto_config = None
                  self.additional_params = additional_params

          """
          Custom implementation:
          These functions are specific to this module.
          """
          class Params(ParamsBase):
              """ Tailor this class to add any unique configuration """
              def __init__(self, env, additional_params):
                  try:
                      super().__init__(env, additional_params)
                      last_day_of_prev_month = date.today().replace(day=1) - timedelta(days=1)
                      self.last_day_of_prev_month = last_day_of_prev_month.strftime("%Y-%m-%dT%H:%M:%SZ")
                      self.start_day_of_prev_month = (date.today().replace(day=1) - timedelta(days=last_day_of_prev_month.day)).strftime("%Y-%m-%dT%H:%M:%SZ")
                  except (KeyError, AttributeError) as exc:
                      raise CidCriticalError(f"Invalid parameters supplied", exc)

          def get_api_data(account, params, region): #pylint: disable=unused-argument
              """ Tailor this method to call the necessary APIs and process the data """
              logger.debug(f"Entering get_api_data for region '{region}'")
              cw_client = get_client_with_role(params.role_name, account.account_id, region=region, service="cloudwatch", params=params)
              ec2_client = get_client_with_role(params.role_name, account.account_id, region=region, service="ec2", params=params)
              results = []
              list_tgw_attachments = ec2_client.describe_transit_gateway_attachments()
              for attachment in list_tgw_attachments['TransitGatewayAttachments']:
                  record = {}
                  metrics = query_metrics(cw_client, 'BytesIn', attachment, params)
                  for metric in metrics['MetricDataResults']:
                      record = {
                          'TGW': attachment['TransitGatewayId'],
                          'NetworkingAccount': attachment['TransitGatewayOwnerId'],
                          'CustomerAccount': attachment['ResourceOwnerId'],
                          'TGW-Attachment': attachment['TransitGatewayAttachmentId'],
                          'BytesIn': metric['Values'],
                          'Region': region
                      }
                  metrics = query_metrics(cw_client, 'BytesOut', attachment, params)
                  for metric in metrics['MetricDataResults']:
                      record['BytesOut'] = metric['Values']
                      results.append(record)
              logger.info(f"API results total {len(results)}")
              return results

          def get_s3_key(account, params, region): #pylint: disable=unused-argument
              """ Tailor this method to set the appropriate S3 prefix and object name """
              return datetime.now().strftime(
                  f"{params.module_name}/{params.module_name}-data/payer_id={account.payer_id}/"
                  f"year=%Y/month=%m/{params.module_name}-{region}-%Y-%m-%d.json")
                  #f"{params.module_name}/{params.module_name}-data/payer_id={account.payer_id}/"
                  #f"year=%Y/month=%m/tgw-{item['TransitGatewayAttachmentId']}-{region}.json"

          def query_metrics(cw_client, byte, item, params):
              """ Helper to get the bytes in or out total from CW """
              cw_data = cw_client.get_metric_data(
                  MetricDataQueries=[
                      {
                          'Id': 'tgwMetric',
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/TransitGateway',
                                  'MetricName': f'{byte}',
                                  'Dimensions': [
                                      {
                                          'Name': 'TransitGatewayAttachment',
                                          'Value': item['TransitGatewayAttachmentId']
                                      },
                                      {
                                          'Name': 'TransitGateway',
                                          'Value': item['TransitGatewayId']
                                      },
                                  ]
                              },
                              'Period': 2592000,
                              'Stat': 'Sum',
                          },
                          'ReturnData': True},
                  ],
                  StartTime=params.start_day_of_prev_month,
                  EndTime=params.last_day_of_prev_month,
                  ScanBy='TimestampDescending'
              )
              return cw_data

          """
          Common implementation:
          These functions and classes are structured for common usage
          patterns across different modules
          """
          logger = logging.getLogger()
          for h in logger.handlers:
              h.setFormatter(logging.Formatter("[%(levelname)s] %(message)s (%(aws_request_id)s)"))
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context): #pylint: disable=unused-argument
              """ Common structured entry for Lambda invocation. Core processing done in main()."""
              logger.info(f"Incoming event: {json.dumps(event)}")
              status_code = 500
              try:
                  main(json.loads(event["account"]), event.get('params', ''))
                  status_code = 200
              except KeyError as exc:
                  raise CidCriticalError(f"Account is not defined in the incoming event data. Please do not trigger this function manually. Use the corresponding {os.environ['MODULE_NAME']} state machine in Step Functions instead.")
              except CidNonCriticalError as exc:
                  status_code = 200
              except CidCriticalError as exc:
                  raise exc
              except Exception as exc:
                  raise CidCriticalError(f"(UnhandledExceptionError) in this module", exc)
              finally:
                  return {"statusCode": status_code}

          def main(account_json, additional_params=None):
              """ Method to orchestrate the retrieval and storage of API data """
              logger.debug(f"Entering main")
              try:
                  account = Account(account_json)
                  logger.info(f"Entering main for account: {account.account_id}")
                  params = Params(os.environ, additional_params)
                  for region in params.regions:
                      logger.info(f"Processing for region '{region}'")
                      records = get_api_data(account, params, region)
                      if len(records) > 0:
                          store_to_temp(records, params)
                          upload_to_s3(account, params, region)
                      else:
                          logger.info(f"No file uploaded for region '{region}'")
                  logger.info(f"Exiting main without error")
              except CidError as exc:
                  raise exc
              except (botocore.exceptions.ClientError, ClientAccessError) as exc:
                  raise CidCriticalError(f"Possible role misconfiguration for {params.role_name}", exc)
              except Exception as exc:
                  raise CidCriticalError(f"(UnhandledExceptionError)", exc)

          def store_to_temp(records, params):
              """ Takes the list of processed records and moves them to a temp file """
              logger.debug("Entering store_to_temp")
              count = 0
              try:
                  with open(params.tmp_file, "w", encoding='utf-8') as f:
                      for record in records:
                          f.write(json.dumps(
                              record,
                              default=lambda x: x.isoformat() if isinstance(x, (date, datetime)) else None)
                              + "\n"
                          )
                          count += 1

              except Exception as exc:
                  raise CidCriticalError(f"Unhandled exception in store_to_temp", exc)

              logger.info(f"Stored {count} record(s) in temp file")
              return count

          def upload_to_s3(account, params, region=None):
              """ Moves the processed API data from the temp file to the designated S3 bucket """
              logger.debug(f"Entering upload_to_s3 for bucket {params.bucket}")
              try:
                  key = get_s3_key(account, params, region)
                  boto3.client('s3').upload_file(params.tmp_file, params.bucket, key)
                  logger.info(f"Data stored to s3://{params.bucket}/{key}")
                  return True

              except Exception as exc:
                  raise CidCriticalError("Exception in upload_to_s3", exc)

          def get_client_with_role(role_name, account_id, service, region, params):
              """ Assumes the designated data gathering read-only role and instantiates a boto3 client with it """
              logger.debug(f"Entering get_client_with_role to get '{service}' client with role '{role_name}' from account '{account_id}' in region '{region}'")
              try:
                  credentials = boto3.client('sts').assume_role(
                      RoleArn=f"arn:aws:iam::{account_id}:role/{role_name}",
                      RoleSessionName="data_collection"
                  )['Credentials']
                  logger.debug("Successfully assumed role, now getting client")
                  client = boto3.client(
                      service,
                      region_name = region,
                      aws_access_key_id = credentials['AccessKeyId'],
                      aws_secret_access_key = credentials['SecretAccessKey'],
                      aws_session_token = credentials['SessionToken'],
                      config = params.boto_config
                  )
                  logger.info(f"Successfully created '{service}' client with role '{role_name}' from account '{account_id}' in region '{region}'")
                  return client

              except Exception as exc:
                  raise ClientAccessError(exc, role_name, account_id, service, region)

          # Helper classes
          class Account():
              def __init__(self, account_json: dict):
                  try:
                      self.account_id = account_json["account_id"]
                      self.account_name = account_json["account_name"]
                      self.payer_id = account_json["payer_id"]
                  except KeyError:
                      raise CidCriticalError(f"Invalid account data passed {account_json}")

          class CidError(Exception):
              def __init__(self, message="", exc=None):
                  try:
                      message = f"({type(exc).__name__}) exception. {message}" if exc else message
                      if type(self) == CidNonCriticalError.__class__:
                          logger.warning(message)
                      else:
                          logger.error(message)
                      super().__init__(message)
                  except Exception as exc:
                      pass
          class CidNonCriticalError(CidError):
              def __init__(self, message="", exc=None):
                  super().__init__(message, exc)
          class CidCriticalError(CidError):
              def __init__(self, message="", exc=None):
                  super().__init__(message, exc)
          class ClientAccessError(Exception):
              def __init__(self, exc, role_name, account_id, service, region):
                  message = f"({type(exc).__name__}) exception: '{exc}' when getting '{service}' client with role '{role_name}' from account '{account_id}' in region '{region}'"
                  logger.warning(message)
                  super().__init__(message)
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: 'INFO'
          BUCKET_NAME: !Ref DestinationBucket
          MODULE_NAME: !Ref CFDataName
          ROLE_NAME: !Ref MultiAccountRoleName
          REGIONS: !Ref RegionsInScope
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionString: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-Crawler"]'
        CollectionType: "LINKED"
        Params: ''
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${ResourcePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: 'FLEXIBLE'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN
        Input: !Sub '{"module_lambda":"${LambdaFunction.Arn}","crawlers": ["${ResourcePrefix}${CFDataName}-Crawler"]}'

  LambdaAnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaQueryCUR:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a chargeback view of the transit gateway
      Name: transit_gateway_chargeback_cur
      QueryString: !Sub
        CREATE OR REPLACE VIEW "transit_gateway_chargeback" AS
        WITH
          cur_all AS (
          SELECT *
          FROM
          ${DatabaseName}.transit_gateway_data
        )
        , customer_tgw_data AS (
          SELECT
            bill_billing_period_start_date
          , bill_payer_account_id
          , bill_billing_entity
          , line_item_usage_start_date
          , line_item_usage_account_id
          , line_item_line_item_type
          , line_item_product_code
          , line_item_usage_type
          , line_item_operation
          , line_item_line_item_description
          , product_product_name
          , product_operation
          , product_product_family
          , product_servicecode
          , product_servicename
          , product_location
          , year
          , month
          , sum(CAST(line_item_usage_amount AS decimal(16,8))) as usage_amount
          , CAST((sum(line_item_usage_amount) / sum(sum(line_item_usage_amount)) OVER (PARTITION BY product_location)) AS decimal(5,2)) as percentage
          FROM
            ${CURTable}
          WHERE line_item_usage_account_id <> '${AWS::AccountId}'
          AND product_location LIKE '%US%'
          AND product_group = 'AWSTransitGateway'
          AND pricing_unit = 'GigaBytes'
          GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
        )
        , network_all AS (
          SELECT
            bill_payer_account_id
          , bill_billing_period_start_date
          , CAST(sum(CASE WHEN (line_item_line_item_type = 'EdpDiscount') THEN line_item_unblended_cost ELSE 0 END) AS decimal(5,2)) as EDP_Discounts
          , CAST(sum(CASE WHEN (product_group = 'AWSTransitGateway') THEN line_item_unblended_cost ELSE 0 END) AS decimal(5,2)) as Total_Cost
          FROM
            ${CURTable}
          WHERE
          line_item_line_item_type <> 'Tax'
          AND line_item_usage_account_id = '${AWS::AccountId}'
          AND line_item_product_code = 'AmazonVPC'
          AND (line_item_operation = 'CreateVpnConnection'
          OR line_item_operation = 'TransitGatewayVPC'
          OR line_item_operation = 'TransitGatewayVPN'
          OR line_item_operation = 'TransitGatewayPeering')
          GROUP BY 1, 2
        )
        SELECT
          customer_tgw_data.bill_billing_period_start_date
        , customer_tgw_data.bill_payer_account_id
        , bill_billing_entity
        , line_item_usage_start_date
        , line_item_usage_account_id
        , line_item_line_item_type
        , line_item_product_code
        , line_item_usage_type
        , line_item_operation
        , line_item_line_item_description
        , product_product_name
        , product_operation
        , product_product_family
        , product_servicecode
        , product_servicename
        , Percentage as chargeback_proportion
        , Total_Cost as total_Networking_cost
        , (Total_Cost * Percentage) as chargeback_cost
        , Year
        , Month
        FROM
          customer_tgw_data
        LEFT JOIN network_all ON
          customer_tgw_data.bill_billing_period_start_date = network_all.bill_billing_period_start_date
          AND network_all.bill_payer_account_id = customer_tgw_data.bill_payer_account_id
        ORDER BY Percentage DESC

  AthenaQueryCW:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a chargeback view of joined data from cloudwath and transigateway
      Name: transit_gateway_chargeback_cw
      QueryString: !Sub
        CREATE OR REPLACE VIEW "transit_gateway_chargeback_to_customer_final_results" AS
        WITH
          summary AS (
            SELECT
              *
            , (sum(bytesin[1]) + sum(bytesout[1]) OVER (PARTITION BY "bill_payer_account_id")) as total_data_transfer
            , (sum(bytesin[1]) + sum(bytesout[1])) as usage_account_dx_total
            FROM
              ${DatabaseName}.transit_gateway_data a
            LEFT JOIN ${DatabaseName}.transit_gateway_chargeback b ON a.customeraccount = b.line_item_usage_account_id AND a.year = b.year AND a.month = b.month
            GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
            ORDER BY bytesIn DESC
          )
          SELECT
            *
          , (usage_account_dx_total / total_data_transfer) as chargeback_percentage
          , ("total_Networking_cost" * (usage_account_dx_total / total_data_transfer)) as chargeback_cost_final
          FROM
            summary
